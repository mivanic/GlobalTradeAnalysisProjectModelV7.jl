var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [GlobalTradeAnalysisProjectModelV7]\nOrder   = [:function]","category":"page"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.aggregate_data-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.aggregate_data","text":"    aggregate_data(; hData, hParameters, hSets, comMap, regMap, endMap)\n\nAggregates data, parameters and sets based on the provided mapping vectors.\n\nArgs:\n\nhData: a dictionary of GTAP data (arrays) with the names as found in HAR files\nhParameters: a dictionary of GTAP parameters (arrays) with the names as found in HAR files\nhSets: a dictionary of GTAP sets (vectors of strings) with the names as found in HAR files\ncomMap: a mapping vector (NamedVector) which provides for each element in set comm the desired aggregate name\nregMap: a mapping vector (NamedVector) which provides for each element in set reg the desired aggregate name\nendMap: a mapping vector (NamedVector) which provides for each element in set endw the desired aggregate name\n\nRetruns:\n\nA named tuple with elements hData, hParameters, hSets containing the aggregated data\n\nExample:\n\njulia (; hData, hParameters, hSets) = aggregate_data(hData=data, hParameters=parameters, hSets=sets, comMap=comMap, regMap=regMap, endMap=endMap)\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.aggregate_data_legacy-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.aggregate_data_legacy","text":"    aggregate_data_legacy(; hData, hParameters, hSets, comMap, regMap, endMap)\n\nAggregates data, parameters and sets based on the provided mapping vectors while incorporating an error in aggregation found in GTAPAgg2 or FlexAgg, where three parameters (i.e., ESUBM, ESUBD and ESUBV) are aggregated globally even though they are defined as region-specific\n\nArgs:\n\nhData: a dictionary of GTAP data (arrays) with the names as found in HAR files\nhParameters: a dictionary of GTAP parameters (arrays) with the names as found in HAR files\nhSets: a dictionary of GTAP sets (vectors of strings) with the names as found in HAR files\ncomMap: a mapping vector (NamedVector) which provides for each element in set comm the desired aggregate name\nregMap: a mapping vector (NamedVector) which provides for each element in set reg the desired aggregate name\nendMap: a mapping vector (NamedVector) which provides for each element in set endw the desired aggregate name\n\nRetruns:\n\nA named tuple with elements hData, hParameters, hSets containing the aggregated data\n\nExample:\n\njulia (; hData, hParameters, hSets) = aggregate_data_legacy(hData=data, hParameters=parameters, hSets=sets, comMap=comMap, regMap=regMap, endMap=endMap)\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.build_model!-Tuple{Any}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.build_model!","text":"build_model!(mc; max_iter=50, constr_viol_tol=1e-8, bound_push=1e-15)\n\nBuilds the GTAP model in the provided model container (mc) which has an empty Ipopt model. This function is not typically called by the user; instead, it is invoked by generate_initial_model(). However, if the user wishes to change the model, he or she can extend this function.\n\nArgs:\n\nmc: a model container\n\nOptional args:\n\nmax_iter: maximum number of iterations\nconstr_viol_tol: accuracy for constraint satisfaction\nbound_push: mandatory move of the starting values from constraint bounds\n\nRetruns:\n\nNothing but it modifies the mc object, adding on the existing model element\n\nExample:\n\njulia build_model!(mc)\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.calculate_ev-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.calculate_ev","text":"Deprecated. Use calculate_expenditure()\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.calculate_expenditure-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.calculate_expenditure","text":"    calculate_expenditure(; sets, data0, data1, parameters, max_iter=50, constr_viol_tol=1e-5, bound_push=1e-15)\n\nCalculate the expenditure at post simulation utility (in data1) at original prices (data0)\n\nArgs:\n\nsets: a dictionary of sets\ndata0: a dictionary of data from baseline solution\ndata1: a dictionary of data from simulation solution\nparameters: a dictionary of parameters\n\nOptional args:\n\nmax_iter: maximum number of iterations\nconstr_viol_tol: accuracy for constraint satisfaction\nbound_push: mandatory move of the starting values from constraint bounds\n\nReturns:\n\nA vector of expenditures.\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.calculate_gdp-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.calculate_gdp","text":"calculate_gdp(; sets, data0, data1)\n\nCalculate GDP from post-simulation quantities at pre-simulation prices.\n\nArgs:\n\nsets: a dictionary of sets\ndata0: a dictionary of data from baseline solution\ndata1: a dictionary of data from simulated solution\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.extract_model!-Tuple{Any}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.extract_model!","text":"extract_model!(model_container)\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.generate_calibration_inputs-Tuple{Any, Any}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.generate_calibration_inputs","text":"generate_calibration_inputs(model_container, start_data)\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.generate_initial_model-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.generate_initial_model","text":"generate_initial_model(; hSets, hData, hParameters)\n\nProduces an initial model container based on data, parameters and sets.\n\nArgs:\n\nhSet: a dictionary of sets\nhData: a dictionary of data\nhParameters: a dictionary of parameters\n\nReturns:\n\nA model container with the following elements:\n\nmodel: an empty Ipopt model\ndata: a dictionary of data (variables in the model)\nparameters: a dictionary of parameter values\nsets: a dictionary of sets\nfixed: a dictionary of Boolean arrays defining the closure of the model (exogenous/fixed variables)\nlower: a dictionary of lower bounds for model variables\nupper: a dictionary of upper bounds for model variables\n\nExample:\n\njulia generate_initial_model( hSets hData hParameters)\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.generate_starting_values-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.generate_starting_values","text":"generate_starting_values(; hSets, hData, hParameters)\n\nDoc string here. It generates sets.\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.get_sample_data-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.get_sample_data","text":"get_sample_data()\n\nReturns a small sample data set from publicly available version 9 of the GTAP database.\n\nArgs:\n\nNone\n\nRetruns:\n\nA named tuple with\n\nhData: a dictionary with sample aggregated data\nhParamters: a dictionary with sample aggregated parameters\nhSets: a dictionary with sample aggregated sets\n\nExample:\n\njulia (; hData, hParameters, hSets) = get_sample_data()\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.initialize_model!-Tuple{Any}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.initialize_model!","text":"initialize_model!(model_container)\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.run_model!-Tuple{Any}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.run_model!","text":"run_model!(model_container; max_iter=50, constr_viol_tol=1e-8, bound_push=1e-15)\n\nRuns the model (modelcontainer.model) by executing these steps: (1) set all starting  values to those found in the data (modelcontainer.data), (2) fix all variables that are specified as exogenous (modelcontainer.fixed), (3) solve the model, (4) load all variable values to the data (modelcontainer.data)\n\nArgs:\n\nmodel_container: model container\n\nOptional args:\n\nmax_iter: maximum number of iterations\nconstr_viol_tol: accuracy for constraint satisfaction\nbound_push: mandatory move of the starting values from constraint bounds\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.solve_model!-Tuple{Any}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.solve_model!","text":"solve_model!(model_container; max_iter, constr_viol_tol, bound_push)\n\n\n\n\n\n","category":"method"},{"location":"functions/#GlobalTradeAnalysisProjectModelV7.solve_model-Tuple{}","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.solve_model","text":"solve_model(; sets, data, parameters, fixed, max_iter=50, constr_viol_tol=1e-8, bound_push=1e-15, model=nothing)\n\n\n\n\n\n","category":"method"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is intended to allow the user to run the standard GTAP model v 7 in levels and completely in Julia (JuMP, Ipopt).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Install:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(\"GlobalTradeAnalysisProjectModelV7\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Useful packages:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(\"HeaderArrayFile\")\nPkg.add(\"NamedArrays\")","category":"page"},{"location":"#Simple-example","page":"Introduction","title":"Simple example","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This example will use a sample data set to do a simple tariff simulation.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"# Load packages\nusing GlobalTradeAnalysisProjectModelV7, HeaderArrayFile, NamedArrays\n\n# Get the sample data\n(hData, hParameters, hSets) = get_sample_data()\n\n# Clean the data: trade below 1e-6 makes little sense\nvalid_trade = hData[\"vxsb\"].>1e-4\nfor k ∈ [\"vcif\",\"vmsb\",\"vfob\",\"vxsb\"]\n    hData[k][.!valid_trade].=0\nend\n\n# Produce initial uncalibrated model using the GTAP data\nmc = generate_initial_model(hSets=hSets, hData=hData, hParameters=hParameters)\n\n# Keep the start data for calibration---the value flows are the correct ones\nstart_data = deepcopy(mc.data)\n\n# Run the model to get a solution\nrun_model!(mc)\n\n# Let's keep the starting values of all data\nstart_solution = deepcopy(mc.data)\n\n# Get the required inputs for calibration by providing the target values in start_data\n(;fixed_calibration, data_calibration)=generate_calibration_inputs(mc, start_data)\n\n# Keep the default closure (fixed) for later\nfixed_default = deepcopy(mc.fixed)\n\n# Load the calibration data and closure \nmc.data = deepcopy(data_calibration)\nmc.fixed = deepcopy(fixed_calibration)\n\nrun_model!(mc)\n\n# Save the calibrated data---this is the starting point for all simulation\ncalibrated_data = deepcopy(mc.data)\n\n# Let's change the closure to the default (simulation) closure\nmc.fixed = deepcopy(fixed_default)\n\n# Start with the calibrated data\nmc.data = deepcopy(calibrated_data)\n\n\n### TARIFF SCENARIO\n# Double the power of tariff\nmc.data[\"tms\"][[\"crops\", \"processed food\"], [\"mena\", \"sub-saharan africa\"], \"eu\"] .= mc.data[\"tms\"][[\"crops\", \"processed food\"], [\"mena\", \"sub-saharan africa\"], \"eu\"] * 2\n\n# Run the model\nrun_model!(mc)\n\n## View some of the solutions:\n# See change in exports to the eu\nround.((mc.data[\"qxs\"][:,:,\"eu\"] ./ calibrated_data[\"qxs\"][:,:,\"eu\"] .-1) .* 100,digits = 2)\n\n# See the percentage change in qpa, for example:\nround.((mc.data[\"qpa\"] ./ calibrated_data[\"qpa\"] .-1) .* 100, digits = 2)\n\n# Calculate EV\nev = calculate_expenditure(sets = mc.sets, data0=calibrated_data, data1=mc.data, parameters=mc.parameters)  .- calibrated_data[\"y\"]","category":"page"},{"location":"types/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"types/","page":"Functions","title":"Functions","text":"Modules = [GlobalTradeAnalysisProjectModelV7]\nOrder   = [:type]","category":"page"},{"location":"types/#GlobalTradeAnalysisProjectModelV7.model_container_struct","page":"Functions","title":"GlobalTradeAnalysisProjectModelV7.model_container_struct","text":"mutable struct model_container_struct\n\nA container of all data for a model\n\n\n\n\n\n","category":"type"}]
}
